name: Windows and Ubuntu demos

on:
  push:
    tags:
      - 'demo-*'

jobs:
  compat:
    name: Compatibility check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
        python-version: ['3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Qt runtime libs (Ubuntu)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1 \
            libegl1 \
            libglx-mesa0 \
            libopengl0 \
            libglu1-mesa \
            libxkbcommon-x11-0 \
            libxcb-xinerama0 \
            libxcb-cursor0 \
            libdbus-1-3 \
            zip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Headless import checks
        shell: bash
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          python - <<'PY'
          import sys
          import platform
          print('Python', sys.version)
          print('Platform', platform.platform())
          # core deps
          import PySide6
          from PySide6.QtWidgets import QApplication
          import PIL, numpy, pandas, openpyxl
          # app imports
          from pathlib import Path
          sys.path.insert(0, str(Path('standalone_app').absolute()))
          import run_app
          print('Imports OK')
          PY

  build:
    name: Build installers
    needs: compat
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
        python-version: ['3.11']
    env:
      # Expose secrets as env so we can check env.* in if conditions
      WIN_CERT_PFX: ${{ secrets.WIN_CERT_PFX }}
      WIN_CERT_PASSWORD: ${{ secrets.WIN_CERT_PASSWORD }}
      MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
      MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
      MACOS_DEVELOPER_ID_APP: ${{ secrets.MACOS_DEVELOPER_ID_APP }}
      MACOS_TEAM_ID: ${{ secrets.MACOS_TEAM_ID }}
      MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
      MACOS_NOTARIZATION_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up venv (POSIX)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Set up venv (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Install Qt runtime libs (Ubuntu)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1 \
            libegl1 \
            libglx-mesa0 \
            libopengl0 \
            libglu1-mesa \
            libxkbcommon-x11-0 \
            libxcb-xinerama0 \
            libxcb-cursor0 \
            libdbus-1-3 \
            zip
      - name: Build with PyInstaller (POSIX)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          source .venv/bin/activate
          # Constrain NumPy to <2 explicitly to avoid ABI issues during analysis
          pip install 'numpy<2' || true
          python -m PyInstaller --noconfirm --windowed --name SpermVerificationApp \
            --hidden-import PySide6.QtNetwork \
            --collect-data PySide6 \
            --collect-all PIL \
            --exclude-module PySide6.Qt3DAnimation --exclude-module PySide6.Qt3DCore --exclude-module PySide6.Qt3DRender --exclude-module PySide6.Qt3DExtras --exclude-module PySide6.Qt3DInput --exclude-module PySide6.Qt3DLogic \
            --exclude-module PySide6.QtWebEngineCore --exclude-module PySide6.QtWebEngineWidgets --exclude-module PySide6.QtWebEngineQuick \
            --exclude-module PySide6.QtCharts --exclude-module PySide6.QtDataVisualization \
            --exclude-module PySide6.QtMultimedia --exclude-module PySide6.QtMultimediaWidgets \
            --exclude-module PySide6.QtQuick --exclude-module PySide6.QtQuickWidgets --exclude-module PySide6.QtQuickControls2 --exclude-module PySide6.QtQuick3D \
            --exclude-module PySide6.QtOpenGL --exclude-module PySide6.QtOpenGLWidgets \
            --exclude-module PySide6.QtHelp --exclude-module PySide6.QtDesigner --exclude-module PySide6.QtGraphs \
            --exclude-module PySide6.QtHttpServer --exclude-module PySide6.QtLocation --exclude-module PySide6.QtPositioning \
            --exclude-module PySide6.QtRemoteObjects --exclude-module PySide6.QtSensors --exclude-module PySide6.QtSerialBus --exclude-module PySide6.QtSerialPort \
            --exclude-module PySide6.QtSpatialAudio --exclude-module PySide6.QtPdf --exclude-module PySide6.QtPdfWidgets \
            --exclude-module PySide6.QtSql --exclude-module PySide6.QtSvg --exclude-module PySide6.QtSvgWidgets \
            --exclude-module PySide6.QtTest --exclude-module PySide6.QtUiTools --exclude-module PySide6.QtWebSockets \
            --exclude-module PySide6.QtBluetooth --exclude-module PySide6.QtNfc --exclude-module PySide6.QtNetworkAuth --exclude-module PySide6.QtDBus --exclude-module PySide6.QtAsyncio \
            standalone_app/run_app.py
      - name: Build with PyInstaller (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: .\.venv\Scripts\Activate.ps1; python -m PyInstaller --noconfirm --windowed --name SpermVerificationApp --hidden-import PySide6.QtNetwork --collect-data PySide6 --collect-all PIL --exclude-module PySide6.Qt3DAnimation --exclude-module PySide6.Qt3DCore --exclude-module PySide6.Qt3DRender --exclude-module PySide6.Qt3DExtras --exclude-module PySide6.Qt3DInput --exclude-module PySide6.Qt3DLogic --exclude-module PySide6.QtWebEngineCore --exclude-module PySide6.QtWebEngineWidgets --exclude-module PySide6.QtWebEngineQuick --exclude-module PySide6.QtCharts --exclude-module PySide6.QtDataVisualization --exclude-module PySide6.QtMultimedia --exclude-module PySide6.QtMultimediaWidgets --exclude-module PySide6.QtQuick --exclude-module PySide6.QtQuickWidgets --exclude-module PySide6.QtQuickControls2 --exclude-module PySide6.QtQuick3D --exclude-module PySide6.QtOpenGL --exclude-module PySide6.QtOpenGLWidgets --exclude-module PySide6.QtHelp --exclude-module PySide6.QtDesigner --exclude-module PySide6.QtGraphs --exclude-module PySide6.QtHttpServer --exclude-module PySide6.QtLocation --exclude-module PySide6.QtPositioning --exclude-module PySide6.QtRemoteObjects --exclude-module PySide6.QtSensors --exclude-module PySide6.QtSerialBus --exclude-module PySide6.QtSerialPort --exclude-module PySide6.QtSpatialAudio --exclude-module PySide6.QtPdf --exclude-module PySide6.QtPdfWidgets --exclude-module PySide6.QtSql --exclude-module PySide6.QtSvg --exclude-module PySide6.QtSvgWidgets --exclude-module PySide6.QtTest --exclude-module PySide6.QtUiTools --exclude-module PySide6.QtWebSockets --exclude-module PySide6.QtBluetooth --exclude-module PySide6.QtNfc --exclude-module PySide6.QtNetworkAuth --exclude-module PySide6.QtDBus --exclude-module PySide6.QtAsyncio standalone_app/run_app.py

      - name: Code sign (Windows)
        if: ${{ runner.os == 'Windows' && env.WIN_CERT_PFX != '' && env.WIN_CERT_PASSWORD != '' }}
        shell: bash
        run: |
          echo "$WIN_CERT_PFX" | base64 -d > code_sign.pfx
          powershell -Command "& {\
            Set-StrictMode -Version Latest; \
            $ErrorActionPreference='Stop'; \
            $exe = 'dist/SpermVerificationApp/SpermVerificationApp.exe'; \
            & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe' sign \
              /f code_sign.pfx /p $Env:WIN_CERT_PASSWORD \
              /tr http://timestamp.sectigo.com /td sha256 /fd sha256 \
              $exe \
          }"

      - name: Code sign + Notarize (macOS)
        if: ${{ runner.os == 'macOS' && env.MACOS_CERT_P12 != '' && env.MACOS_CERT_PASSWORD != '' && env.MACOS_DEVELOPER_ID_APP != '' && env.MACOS_TEAM_ID != '' && env.MACOS_NOTARIZATION_APPLE_ID != '' && env.MACOS_NOTARIZATION_PASSWORD != '' }}
        shell: bash
        run: |
          set -euo pipefail
          APP="dist/SpermVerificationApp.app"
          KEYCHAIN=build.keychain
          echo "$MACOS_CERT_P12" | base64 -d > cert.p12
          security create-keychain -p temp "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p temp "$KEYCHAIN"
          security import cert.p12 -k "$KEYCHAIN" -P "$MACOS_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k temp "$KEYCHAIN"
          codesign --deep --force --options runtime --sign "$MACOS_DEVELOPER_ID_APP" "$APP"
          ditto -c -k --sequesterRsrc --keepParent "$APP" SpermVerificationApp.zip
          xcrun notarytool submit SpermVerificationApp.zip --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --password "$MACOS_NOTARIZATION_PASSWORD" --team-id "$MACOS_TEAM_ID" --wait
          xcrun stapler staple "$APP"

      - name: Archive artifact (zip)
        if: ${{ runner.os != 'Windows' }}
        run: |
          cd dist
          if [ -d SpermVerificationApp.app ]; then \
            ditto -c -k --sequesterRsrc --keepParent SpermVerificationApp.app SpermVerificationApp-macOS.zip; \
          else \
            zip -r SpermVerificationApp-${{ runner.os }}.zip SpermVerificationApp; \
          fi

      - name: Archive artifact (7z)
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          cd dist
          7z a SpermVerificationApp-Windows.zip SpermVerificationApp

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpermVerificationApp-${{ runner.os }}
          path: |
            dist/SpermVerificationApp-*.zip
            dist/SpermVerificationApp-macOS.zip
